{"version":3,"sources":["config/locales/index.js","config/routes.js","config/menuItems.js","config/themes.js","config/config.js","utils/auth.js","App.js","serviceWorker.js","index.js"],"names":["locales","locale","messages","loadData","About","lazy","Experience","Education","Skills","routes","path","exact","component","getMenuItems","props","appConfig","intl","updateLocale","isAuthorised","auth","isAuthenticated","localeItems","allLocales","map","l","value","undefined","visible","primaryText","formatMessage","id","onClick","leftIcon","divider","secondaryText","primaryTogglesNestedList","nestedItems","themes","config","getData","signInURL","defaultLocale","parseLanguages","onError","e","menu","theme","defaultThemeID","defaultType","pages","LandingPage","PageNotFound","merge","MUIConfig","_config","Demo","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bfaff66e.chunk.js","sourcesContent":["const locales = [{\r\n    locale: 'en',\r\n    messages: import('./en'),\r\n    loadData: import(`@formatjs/intl-relativetimeformat/dist/locale-data/en`)\r\n  }, {\r\n    locale: 'de',\r\n    messages: import('./de'),\r\n    loadData: import(`@formatjs/intl-relativetimeformat/dist/locale-data/de`),\r\n}];\r\n\r\nexport default locales;\r\n","/* eslint-disable react/jsx-key */\r\nimport React, { lazy } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst About = lazy(() => import('../pages/About/About'));\r\nconst Experience = lazy(() => import('../pages/Experience/Experience'));\r\nconst Education = lazy(() => import('../pages/Education/Education'));\r\nconst Skills = lazy(() => import('../pages/Skills/Skills'));\r\n\r\nconst routes = [\r\n  <Route path=\"/about\" exact component={About} />,\r\n  <Route path=\"/experience\" exact component={Experience} />,\r\n  <Route path=\"/education\" exact component={Education} />,\r\n  <Route path=\"/skills\" exact component={Skills} />\r\n];\r\n\r\nexport default routes;\r\n","import React from 'react';\r\nimport allLocales from './locales';\r\nimport Language from '@material-ui/icons/Language'\r\nimport InfoOutlined from '@material-ui/icons/InfoOutlined';\r\nimport BusinessOutlined from '@material-ui/icons/BusinessOutlined';\r\nimport BookOutlined from '@material-ui/icons/BookOutlined';\r\nimport SortByAlphaOutlined from '@material-ui/icons/SortByAlphaOutlined';\r\n\r\nconst getMenuItems = (props) => {\r\n  const {\r\n    appConfig,\r\n    intl,\r\n    locale,\r\n    updateLocale\r\n  } = props;\r\n  const { auth } = appConfig || {};\r\n  const isAuthorised = auth.isAuthenticated();\r\n  const localeItems = allLocales.map((l) => {\r\n    return {\r\n      value: undefined,\r\n      visible: true,\r\n      primaryText: intl.formatMessage({ id: l.locale }),\r\n      onClick: () => {\r\n        updateLocale(l.locale)\r\n      },\r\n      leftIcon: <Language />\r\n    }\r\n  });\r\n\r\n  return [{\r\n    value: '/about',\r\n    visible: true,\r\n    primaryText: intl.formatMessage({ id: 'about' }),\r\n    leftIcon: <InfoOutlined />,\r\n  }, {\r\n    value: '/experience',\r\n    visible: isAuthorised,\r\n    primaryText: intl.formatMessage({ id: 'experience' }),\r\n    leftIcon: <BusinessOutlined />\r\n  }, {\r\n    value: '/education',\r\n    visible: isAuthorised,\r\n    primaryText: intl.formatMessage({ id: 'education' }),\r\n    leftIcon: <BookOutlined />\r\n  }, {\r\n    value: '/skills',\r\n    visible: isAuthorised,\r\n    primaryText: intl.formatMessage({ id: 'skills' }),\r\n    leftIcon: <SortByAlphaOutlined />\r\n  }, {\r\n    divider: true\r\n  }, {\r\n    primaryText: intl.formatMessage({ id: 'language' }),\r\n    secondaryText: intl.formatMessage({ id: locale }),\r\n    primaryTogglesNestedList: true,\r\n    leftIcon: <Language />,\r\n    nestedItems: localeItems,\r\n  }];\r\n}\r\n\r\nexport default getMenuItems;\r\n","const themes = [{\r\n    id: 'default'\r\n}]\r\n\r\nexport default themes;\r\n","import React, { lazy } from 'react';\r\nimport locales from './locales';\r\nimport routes from './routes';\r\nimport { isAuthorised, getAuth } from '../utils/auth';\r\nimport getMenuItems from './menuItems';\r\nimport themes from './themes';\r\nimport parseLanguages from 'base-shell/lib/utils/locale';\r\n\r\nconst config = {\r\n  auth: {\r\n    isAuthenticated: isAuthorised,\r\n    getData: () => {\r\n      return getAuth()\r\n    },\r\n    signInURL: '/signin',\r\n  },\r\n  routes,\r\n  locale: {\r\n    locales,\r\n    defaultLocale: parseLanguages(['en', 'de'], 'de'),\r\n    onError: (e) => {\r\n      return;\r\n    }\r\n  },\r\n  menu: {\r\n    getMenuItems\r\n  },\r\n  theme: {\r\n    themes,\r\n    defaultThemeID: 'default',\r\n    defaultType: 'light'\r\n  },\r\n  pages: {\r\n    LandingPage: lazy(() => import('../pages/LandingPage/LandingPage')),\r\n    PageNotFound: lazy(() => import('../pages/PageNotFound/PageNotFound'))\r\n  }\r\n}\r\n\r\nexport default config;\r\n","export function getAuth() {\r\n    return true;\r\n}\r\n\r\nexport function isAuthorised() {\r\n    return true;\r\n}\r\n","import React, { Component } from 'react';\r\nimport App from 'base-shell/lib';\r\nimport MUIConfig from 'material-ui-shell/lib';\r\nimport merge from 'base-shell/lib/utils/config';\r\nimport _config from './config';\r\n\r\nconst config = merge(MUIConfig, _config)\r\n\r\nexport default class Demo extends Component {\r\n  render() {\r\n    return <App config={config} />\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nrender(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}